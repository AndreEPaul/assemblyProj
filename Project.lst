Microsoft (R) Macro Assembler Version 14.23.28105.4	    12/06/19 10:59:17
Program 6A     (prog6A.asm				     Page 1 - 1


				TITLE Program 6A     (prog6A.asm)

				; Author:					Andre Paul
				; Last Modified:			12/3/2019
				; OSU email address:		paula@oregonstate.edu
				; Course number/section:	CS 271 / 400
				; Project Number:			6A
				; Due Date:					12/8/2019
				; Description:				This program will read ten integers from the user
				;							and verify the input. It will then print the list back to the user,
				;							print the sum of the list, and the average of the list. This program 
				;							specifically utilizes MACROs getString and displayString and procedures
				;							ReadVal and WriteVal. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; MACRO for getString.
				; This saves the contents of edx and ecx.
				; It then uses the Irvine ReadString procedure.
				getString MACRO stringAddress
					push	edx
					push	ecx
					mov		edx,stringAddress
					mov		ecx,14
					call	ReadString
					pop		ecx
					pop		edx
				ENDM

				; MACRO for displayString.
				; This saves the contents of edx.
				; It then uses the Irvine WriteString procedure.
				displayString MACRO stringAddress
					push	edx
					mov		edx,stringAddress
					call	WriteString
					pop		edx
				ENDM

				; For strings over 10 digits, we can simply not bother checking. So we have 
				; a constant for the longest string acceptable, as well.
				; We also have constants for the ASCII values of numeric ranges.

 = 00000030			LO_ASCII	EQU		48d
 = 00000039			HI_ASCII	EQU		57d

 00000000			.data

 00000000 44 65 6D 6F 6E	intro1		BYTE	"Demonstrating low-level I/O procedures.",0
	   73 74 72 61 74
	   69 6E 67 20 6C
	   6F 77 2D 6C 65
	   76 65 6C 20 49
	   2F 4F 20 70 72
	   6F 63 65 64 75
	   72 65 73 2E 00
 00000028 50 72 6F 67 72	intro2		BYTE	"Programmed by Andre Paul.",0
	   61 6D 6D 65 64
	   20 62 79 20 41
	   6E 64 72 65 20
	   50 61 75 6C 2E
	   00
 00000042 50 6C 65 61 73	intro3		BYTE	"Please provide 10 nonnegative decimal integers.",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 6E 6F
	   6E 6E 65 67 61
	   74 69 76 65 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 00000072 45 61 63 68 20	intro4		BYTE	"Each number needs to be small enough to fit inside a 32 bit register.",0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
 000000B8 41 66 74 65 72	intro5		BYTE	"After you have finished inputting the raw numbers I will display a list",0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 00
 00000100 6F 66 20 74 68	intro6		BYTE	"of the integers, their sum, and their average value.",0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 00000135 50 6C 65 61 73	prompt		BYTE	"Please enter a nonnegative integer number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 6F 6E 6E 65
	   67 61 74 69 76
	   65 20 69 6E 74
	   65 67 65 72 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000161 45 52 52 4F 52	error		BYTE	"ERROR: You did not enter an integer number or your number was too big. Try again: ",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 69 6E
	   74 65 67 65 72
	   20 6E 75 6D 62
	   65 72 20 6F 72
	   20 79 6F 75 72
	   20 6E 75 6D 62
	   65 72 20 77 61
	   73 20 74 6F 6F
	   20 62 69 67 2E
	   20 54 72 79 20
	   61 67 61 69 6E
	   3A 20 00
 000001B4 59 6F 75 20 65	printList	BYTE	"You entered the following numbers: ",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001D8 20 2C 20 00		comma		BYTE	" , ",0
 000001DC 54 68 65 69 72	printSum	BYTE	"Their sum is: ",0
	   20 73 75 6D 20
	   69 73 3A 20 00
 000001EB 54 68 65 69 72	printAvg	BYTE	"Their average is: ",0
	   20 61 76 65 72
	   61 67 65 20 69
	   73 3A 20 00
 000001FE 54 68 61 6E 6B	bye			BYTE	"Thanks for using my program. Bye!",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 2E 20 42
	   79 65 21 00
 00000220  0000000C [		outString	BYTE	12 DUP(' '),0
	    20
	   ] 00

 00000000			.data?
 00000000  0000000F [		userString	BYTE	15 DUP(?)
	    00
	   ]
 0000000F  0000000A [		arrayOfNums DWORD	10 DUP(?)
	    00000000
	   ]
 00000037 00000000		sum			DWORD	?
 0000003B 00000000		avg			DWORD	?


 00000000			.code
 00000000			main PROC

					displayString	OFFSET intro1
 00000000  52		     1		push	edx
 00000001  BA 00000000 R     1		mov		edx,OFFSET intro1
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		edx
 0000000C  E8 00000000 E		call			CrLf	
					displayString	OFFSET intro2
 00000011  52		     1		push	edx
 00000012  BA 00000028 R     1		mov		edx,OFFSET intro2
 00000017  E8 00000000 E     1		call	WriteString
 0000001C  5A		     1		pop		edx
 0000001D  E8 00000000 E		call			CrLf
					displayString	OFFSET intro3
 00000022  52		     1		push	edx
 00000023  BA 00000042 R     1		mov		edx,OFFSET intro3
 00000028  E8 00000000 E     1		call	WriteString
 0000002D  5A		     1		pop		edx
 0000002E  E8 00000000 E		call			CrLf
					displayString	OFFSET intro4
 00000033  52		     1		push	edx
 00000034  BA 00000072 R     1		mov		edx,OFFSET intro4
 00000039  E8 00000000 E     1		call	WriteString
 0000003E  5A		     1		pop		edx
 0000003F  E8 00000000 E		call			CrLf
					displayString	OFFSET intro5
 00000044  52		     1		push	edx
 00000045  BA 000000B8 R     1		mov		edx,OFFSET intro5
 0000004A  E8 00000000 E     1		call	WriteString
 0000004F  5A		     1		pop		edx
 00000050  E8 00000000 E		call			CrLf	
					displayString	OFFSET intro6
 00000055  52		     1		push	edx
 00000056  BA 00000100 R     1		mov		edx,OFFSET intro6
 0000005B  E8 00000000 E     1		call	WriteString
 00000060  5A		     1		pop		edx
 00000061  E8 00000000 E		call			CrLf

 00000066  68 0000000F R		push			OFFSET arrayOfNums
 0000006B  68 00000000 R		push			OFFSET userString
 00000070  E8 00000071			call			ReadVal

 00000075  68 00000220 R		push			OFFSET outString
 0000007A  68 0000000F R		push			OFFSET arrayOfNums
 0000007F  E8 00000140			call			DisplayArray
 00000084  E8 00000000 E		call			CrLf

 00000089  68 00000037 R		push			OFFSET sum
 0000008E  68 0000003B R		push			OFFSET avg
 00000093  68 0000000F R		push			OFFSET arrayOfNums
 00000098  E8 0000016D			call			CalcSumAndAvg

					displayString OFFSET printSum
 0000009D  52		     1		push	edx
 0000009E  BA 000001DC R     1		mov		edx,OFFSET printSum
 000000A3  E8 00000000 E     1		call	WriteString
 000000A8  5A		     1		pop		edx
 000000A9  68 00000220 R		push			OFFSET outString
 000000AE  FF 35 00000037 R		push			sum
 000000B4  E8 000000BC			call			WriteVal
 000000B9  E8 00000000 E		call			CrLf
					
					displayString OFFSET printAvg
 000000BE  52		     1		push	edx
 000000BF  BA 000001EB R     1		mov		edx,OFFSET printAvg
 000000C4  E8 00000000 E     1		call	WriteString
 000000C9  5A		     1		pop		edx
 000000CA  68 00000220 R		push			OFFSET outString
 000000CF  FF 35 0000003B R		push			avg
 000000D5  E8 0000009B			call			WriteVal
 000000DA  E8 00000000 E		call			CrLf

					exit	; exit to operating system
 000000DF  6A 00	   *	    push   +000000000h
 000000E1  E8 00000000 E   *	    call   ExitProcess
 000000E6			main ENDP

				; ReadVal procedure.
				; Description:			Validates that user entered an unsigned integer that can fit in a 32-bit register. It uses lodsb to put each byte
				;						from the users input string into al, then it checks that byte is in desired ASCII range. When it calculates the full number,
				;						it checks the carry flag to make sure the number is not too big for a 32-bit register.
				; Receives:				@arrayOfNums, @userString.
				; Returns:				Nothing.
				; Preconditions:		Nothing.
				; Registers Changed:	eax,ebx,ecx,edx,esi,edi
 000000E6			ReadVal PROC
 000000E6  55				push		ebp
 000000E7  8B EC			mov			ebp,esp
 000000E9  50				push		eax
 000000EA  53				push		ebx
 000000EB  51				push		ecx
 000000EC  52				push		edx
 000000ED  56				push		esi
 000000EE  57				push		edi
				; array indexing is done by edi.
 000000EF  8B 7D 0C			mov			edi,[ebp+12]
				; Clear direction flag to use lodsb properly.	
 000000F2  FC				cld
				; Clear carry flag to make sure incorrect jumps aren't made.
 000000F3  F8				clc
				; Use edx as the counter for "successful" adds into the array.
 000000F4  BA 00000000			mov			edx,0
 000000F9			getNewNumber:
 000000F9  BB 00000000			mov			ebx,0
				displayString	OFFSET prompt
 000000FE  52		     1		push	edx
 000000FF  BA 00000135 R     1		mov		edx,OFFSET prompt
 00000104  E8 00000000 E     1		call	WriteString
 00000109  5A		     1		pop		edx
					getString	[ebp+8]
 0000010A  52		     1		push	edx
 0000010B  51		     1		push	ecx
 0000010C  8B 55 08	     1		mov		edx,[ebp+8]
 0000010F  B9 0000000E	     1		mov		ecx,14
 00000114  E8 00000000 E     1		call	ReadString
 00000119  59		     1		pop		ecx
 0000011A  5A		     1		pop		edx
 0000011B  8B 75 08			mov			esi,[ebp+8]
 0000011E			keepValidating:
 0000011E  AC				lodsb
				; Now a character of input string should be in al register.
 0000011F  3C 00			cmp			al,0
 00000121  74 3B			je			doneWithString
 00000123  3C 30			cmp			al,LO_ASCII
 00000125  7C 24			jl			invalid
 00000127  3C 39			cmp			al,HI_ASCII
 00000129  7F 20			jg			invalid
 0000012B			stillValid:
 0000012B  2C 30			sub			al,48
				; annoyingly could not just mult. ebx by 10...
				; so I'm looping adding to itself 10 times.
				; using edx as a temp to hold the original value.
				; If carry flag is set, number is too big.
 0000012D  B9 00000009			mov			ecx,9
 00000132  52				push		edx
 00000133  8B D3			mov			edx,ebx
 00000135			addAgain:
 00000135  03 DA			add			ebx,edx
 00000137  E2 FC			loop		addAgain
 00000139  5A				pop			edx
 0000013A  72 0F			jc			invalid
				; ebx now holds ebx*10.
				; must extend al to ax then ax to eax 
				; in order to add to ebx.
				; If carry flag is set, number is too big.
 0000013C  66| 0F B6 C0			movzx		ax,al
 00000140  0F B7 C0			movzx		eax,ax
 00000143  03 D8			add			ebx,eax
				; Zero out eax to ensure no leftover contents.
 00000145  33 C0			xor			eax,eax
 00000147  72 02			jc			invalid
 00000149  EB D3			jmp			keepValidating
 0000014B			invalid:
					displayString OFFSET error
 0000014B  52		     1		push	edx
 0000014C  BA 00000161 R     1		mov		edx,OFFSET error
 00000151  E8 00000000 E     1		call	WriteString
 00000156  5A		     1		pop		edx
 00000157  E8 00000000 E		call		CrLf
 0000015C  EB 9B			jmp			getNewNumber
 0000015E			doneWithString:
				; Now, the valid digit should be in ebx. So we can 
				; put it in the array.
 0000015E  89 1F			mov			[edi],ebx
 00000160  83 C7 04			add			edi,4
 00000163  42				inc			edx
 00000164  83 FA 0A			cmp			edx,10
 00000167  74 02			je			doneWithArray
 00000169  EB 8E			jmp			getNewNumber

 0000016B			doneWithArray:
 0000016B  5F				pop			edi
 0000016C  5E				pop			esi
 0000016D  5A				pop			edx
 0000016E  59				pop			ecx
 0000016F  5B				pop			ebx
 00000170  58				pop			eax
 00000171  5D				pop			ebp
 00000172  C2 0008			ret 8
 00000175			ReadVal ENDP

				; WriteVal procedure.
				; Description:			This converts integers digit by digit to a string of characters. 
				; Receives:				An unsigned integer (by value), @outString.
				; Returns:				Nothing.
				; Preconditions:		The numbers being passed have been initialized/set.
				; Registers Changed:	eax,ebx,edx,edi
 00000175			WriteVal PROC
 00000175  55				push		ebp
 00000176  8B EC			mov			ebp,esp
 00000178  50				push		eax
 00000179  52				push		edx
 0000017A  53				push		ebx
 0000017B  57				push		edi
 0000017C  51				push		ecx
 0000017D  56				push		esi

 0000017E  8B 45 08			mov			eax,[ebp+8]
 00000181  BB 0000000A			mov			ebx,10
 00000186  8B 7D 0C			mov			edi,[ebp+12]
				; Clear the contents of the outString every time.
 00000189  B9 0000000C			mov			ecx,12
 0000018E			clearString:
				; Note: 32d is ASCII for space.
 0000018E  C6 07 20			mov			BYTE PTR [edi],32d
 00000191  47				inc			edi
 00000192  E2 FA			loop		clearString
				; Reset address.
 00000194  8B 7D 0C			mov			edi,[ebp+12]
				; Start at the END of outstring. Increment through
				; end to beginning.
 00000197  83 C7 0A			add			edi,10
				; Set direction flag to traverse string left-wards.
 0000019A  FD				std
 0000019B			keepGoing:
 0000019B  BA 00000000			mov			edx,0
 000001A0  F7 F3			div			ebx
				; Remainder in edx. Add 48 for ASCII value.
 000001A2  83 C2 30			add			edx,48

				; BLOCK FOR USING STOSB.
				; Since we need to get the remainder in al, we need to 
				; push and pop these registers, then transfer from edx to al.
 000001A5  52				push		edx
 000001A6  50				push		eax

 000001A7  8A C2			mov			al,dl
 000001A9  AA				stosb

 000001AA  58				pop			eax
 000001AB  5A				pop			edx
				; BLOCK FOR USING STOSB END.

				; keep going until each digit has been processed.
 000001AC  83 F8 00			cmp			eax,0
 000001AF  75 EA			jne			keepGoing
				; Now, the string address in edi should have the new number in it.
					displayString edi
 000001B1  52		     1		push	edx
 000001B2  8B D7	     1		mov		edx,edi
 000001B4  E8 00000000 E     1		call	WriteString
 000001B9  5A		     1		pop		edx

 000001BA  5E				pop			esi
 000001BB  59				pop			ecx
 000001BC  5F				pop			edi
 000001BD  5B				pop			ebx
 000001BE  5A				pop			edx
 000001BF  58				pop			eax
 000001C0  5D				pop			ebp
 000001C1  C2 0008			ret 8
 000001C4			WriteVal ENDP

				; DisplayArray procedure.
				; Description:			This displays the users list that they put in.
				; Receives:				@arrayOfNums, @outString.
				; Returns:				Nothing.
				; Preconditions:		The array has been filled.
				; Registers Changed:	edi,eax,ecx
 000001C4			DisplayArray PROC
 000001C4  55				push		ebp
 000001C5  8B EC			mov			ebp,esp
 000001C7  57				push		edi
 000001C8  50				push		eax
 000001C9  51				push		ecx

				; loop counter.
 000001CA  B9 0000000A			mov			ecx,10
 000001CF  E8 00000000 E		call		CrLf
					displayString OFFSET printList
 000001D4  52		     1		push	edx
 000001D5  BA 000001B4 R     1		mov		edx,OFFSET printList
 000001DA  E8 00000000 E     1		call	WriteString
 000001DF  5A		     1		pop		edx
				; @array goes in edi.
 000001E0  8B 7D 08			mov			edi,[ebp+8]
 000001E3			keepPrinting:
				; Use custom WriteVal instead of WriteDec.
 000001E3  FF 75 0C			push		[ebp+12]
 000001E6  FF 37			push		[edi]
 000001E8  E8 FFFFFF88			call		WriteVal
 000001ED  83 C7 04			add			edi,4
 000001F0  83 F9 01			cmp			ecx,1
 000001F3  7E 0E			jle			lastComma
					displayString OFFSET comma
 000001F5  52		     1		push	edx
 000001F6  BA 000001D8 R     1		mov		edx,OFFSET comma
 000001FB  E8 00000000 E     1		call	WriteString
 00000200  5A		     1		pop		edx
 00000201  E2 E0			loop		keepPrinting
 00000203			lastComma:
 00000203  59				pop			ecx
 00000204  58				pop			eax
 00000205  5F				pop			edi
 00000206  5D				pop			ebp
 00000207  C2 0008			ret 8
 0000020A			DisplayArray ENDP

				; Calculate the sum and the average procedure.
				; Description:			Goes through the passed in array and calculates the sum of it's contents. Uses sum to calc. avg.
				; Receives:				@sum, @avg, @arrayOfNums.
				; Returns:				Nothing.
				; Preconditions:		The array has been filled.
				; Registers Changed:	eax,edi,ecx,edx,ebx
 0000020A			CalcSumAndAvg PROC
 0000020A  55				push		ebp
 0000020B  8B EC			mov			ebp,esp
 0000020D  50				push		eax
 0000020E  57				push		edi
 0000020F  51				push		ecx
 00000210  52				push		edx
 00000211  53				push		ebx

 00000212  8B 7D 08			mov			edi,[ebp+8]
 00000215  B8 00000000			mov			eax,0
 0000021A  B9 0000000A			mov			ecx,10
 0000021F			addNums:
 0000021F  03 07			add			eax,[edi]
 00000221  83 C7 04			add			edi,4
 00000224  E2 F9			loop		addNums
				; Now, sum is in eax. 
				; Use ebx for double dereference.
 00000226  53				push		ebx
 00000227  8B 5D 10			mov			ebx,[ebp+16]
 0000022A  89 03			mov			[ebx],eax
 0000022C  5B				pop			ebx
				; Calc avg.
 0000022D  BA 00000000			mov			edx,0
 00000232  BB 0000000A			mov			ebx,10
 00000237  F7 F3			div			ebx
				; Now, avg is in eax.
				; Use ebx for double dereference.
 00000239  53				push		ebx
 0000023A  8B 5D 0C			mov			ebx,[ebp+12]
 0000023D  89 03			mov			[ebx],eax
 0000023F  5B				pop			ebx

 00000240  5B				pop			ebx
 00000241  5A				pop			edx
 00000242  59				pop			ecx
 00000243  5F				pop			edi
 00000244  58				pop			eax
 00000245  5D				pop			ebp
 00000246  C2 000C			ret 12
 00000249			CalcSumAndAvg ENDP

				END main
Microsoft (R) Macro Assembler Version 14.23.28105.4	    12/06/19 10:59:17
Program 6A     (prog6A.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 0000003F Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 0000022D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000249 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcSumAndAvg  . . . . . . . . .	P Near	 0000020A _TEXT	Length= 0000003F Public STDCALL
  addNums  . . . . . . . . . . .	L Near	 0000021F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayArray . . . . . . . . . .	P Near	 000001C4 _TEXT	Length= 00000046 Public STDCALL
  keepPrinting . . . . . . . . .	L Near	 000001E3 _TEXT	
  lastComma  . . . . . . . . . .	L Near	 00000203 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000E6 _TEXT	Length= 0000008F Public STDCALL
  getNewNumber . . . . . . . . .	L Near	 000000F9 _TEXT	
  keepValidating . . . . . . . .	L Near	 0000011E _TEXT	
  stillValid . . . . . . . . . .	L Near	 0000012B _TEXT	
  addAgain . . . . . . . . . . .	L Near	 00000135 _TEXT	
  invalid  . . . . . . . . . . .	L Near	 0000014B _TEXT	
  doneWithString . . . . . . . .	L Near	 0000015E _TEXT	
  doneWithArray  . . . . . . . .	L Near	 0000016B _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000175 _TEXT	Length= 0000004F Public STDCALL
  clearString  . . . . . . . . .	L Near	 0000018E _TEXT	
  keepGoing  . . . . . . . . . .	L Near	 0000019B _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E6 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI_ASCII . . . . . . . . . . . .	Number	 00000039h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_ASCII . . . . . . . . . . . .	Number	 00000030h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayOfNums  . . . . . . . . . .	DWord	 0000000F _BSS	
avg  . . . . . . . . . . . . . .	DWord	 0000003B _BSS	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye  . . . . . . . . . . . . . .	Byte	 000001FE _DATA	
comma  . . . . . . . . . . . . .	Byte	 000001D8 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 00000161 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000028 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 00000042 _DATA	
intro4 . . . . . . . . . . . . .	Byte	 00000072 _DATA	
intro5 . . . . . . . . . . . . .	Byte	 000000B8 _DATA	
intro6 . . . . . . . . . . . . .	Byte	 00000100 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outString  . . . . . . . . . . .	Byte	 00000220 _DATA	
printAvg . . . . . . . . . . . .	Byte	 000001EB _DATA	
printList  . . . . . . . . . . .	Byte	 000001B4 _DATA	
printSum . . . . . . . . . . . .	Byte	 000001DC _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000135 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum  . . . . . . . . . . . . . .	DWord	 00000037 _BSS	
userString . . . . . . . . . . .	Byte	 00000000 _BSS	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
